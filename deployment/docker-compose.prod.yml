version: '3.8'

services:
  # AI Ride Booking Application - Production
  ai-ride-booking:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-ride-booking-app-prod
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - SESSION_TTL=3600
      - LOG_LEVEL=INFO
    env_file:
      - .env.production
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - audio_files:/tmp/audio
    networks:
      - ai-ride-booking-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for session management - Production
  redis:
    image: redis:7-alpine
    container_name: ai-ride-booking-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./deployment/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - ai-ride-booking-network
    restart: always
    command: redis-server /etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy - Production
  nginx:
    image: nginx:alpine
    container_name: ai-ride-booking-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - audio_files:/var/www/audio:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ai-ride-booking
    networks:
      - ai-ride-booking-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Log aggregation (optional)
  fluentd:
    build: ./deployment/fluentd
    container_name: ai-ride-booking-fluentd
    volumes:
      - ./logs:/fluentd/log/app:ro
      - nginx_logs:/fluentd/log/nginx:ro
      - ./deployment/fluentd/conf:/fluentd/etc
    networks:
      - ai-ride-booking-network
    restart: always
    depends_on:
      - ai-ride-booking

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-ride-booking-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai-ride-booking-network
    restart: always

  # Metrics dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-ride-booking-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - ai-ride-booking-network
    restart: always

# Volumes for persistent data
volumes:
  redis_data:
    driver: local
  audio_files:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  ai-ride-booking-network:
    driver: bridge